# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# tmux leader
 ctrl - space [
 #   "alacritty" : echo "keypress recognized"
 "alacritty" ~
 ]

# WINDOW
 # FOCUS WINDOW/DESKTOP
   ctrl + alt - h : yabai -m window --focus west || \
            yabai -m window --focus $(yabai -m query --windows --display west | \
                                      jq 'map(select(.visible == 1)) | sort_by(.frame.x, .frame.y) | last | .id') || \
            yabai -m display --focus west

   ctrl + alt - l : yabai -m window --focus east || \
            yabai -m window --focus $(yabai -m query --windows --display east | \
                                      jq 'map(select(.visible == 1)) | sort_by(.frame.x, .frame.y) | first | .id') || \
            yabai -m display --focus east

   ctrl + alt - j : yabai -m display --focus south

   ctrl + alt - k : yabai -m display --focus north
#
# # move managed window
 ctrl + alt + shift - h : yabai -m window --warp west
 ctrl + alt + shift - l : yabai -m window --warp east
 ctrl + alt + shift - k : yabai -m window --warp north
 ctrl + alt + shift - j : yabai -m window --warp south
#
# # balance size of windows
ctrl + alt + shift - 0 : yabai -m space --balance
#
# # make floating window fill screen
ctrl + alt + shift - f     : yabai -m window --grid 1:1:0:0:1:1
#
# # toggle window zoom
# # alt - d : yabai -m window --toggle zoom-parent
 ctrl + alt + shift - z : yabai -m window --toggle zoom-fullscreen
#
# # toggle window split type
 ctrl + alt + shift - e : yabai -m window --toggle split
#
# # float / unfloat window and center on screen
 ctrl + alt + shift - t : yabai -m window --toggle float --grid 4:4:1:1:2:2
#
# # MONITOR
#
# # focus monitor
 ctrl + cmd - h : yabai -m display --focus west
 ctrl + cmd - l : yabai -m display --focus east
 ctrl + cmd - k : yabai -m display --focus north
 ctrl + cmd - j : yabai -m display --focus south

 ctrl + cmd - 5 : yabai -m display --focus 1
 ctrl + cmd - 4 : yabai -m display --focus 3
 ctrl + cmd - 6 : yabai -m display --focus 2
 ctrl + cmd - 1 : yabai -m display --focus 4
#
# # MOVE AND FOCUS MONITOR
 ctrl + cmd + shift - l  : yabai -m window --display east; yabai -m display --focus east
 ctrl + cmd + shift - h  : yabai -m window --display west; yabai -m display --focus west
 ctrl + cmd + shift - k  : yabai -m window --display north; yabai -m display --focus north
 ctrl + cmd + shift - j  : yabai -m window --display south; yabai -m display --focus south

#
#
# # DESKTOP
#
# # FOCUS DESKTOP
ctrl + alt + cmd - 0x32 : yabai -m space --focus recent
ctrl + alt + cmd - h : ~/.config/yabai/scripts/cycle_prev.sh
ctrl + alt + cmd - l : ~/.config/yabai/scripts/cycle_next.sh

ctrl + alt + cmd - t : yabai -m space --create
ctrl + alt + cmd - w : yabai -m space --destroy

# # fast focus desktop
ctrl + alt + cmd - 1 : yabai -m space --focus 1
ctrl + alt + cmd - 2 : yabai -m space --focus 2
ctrl + alt + cmd - 3 : yabai -m space --focus 3
ctrl + alt + cmd - 4 : yabai -m space --focus 4
ctrl + alt + cmd - 5 : yabai -m space --focus 5
ctrl + alt + cmd - 6 : yabai -m space --focus 6
ctrl + alt + cmd - 7 : yabai -m space --focus 7
ctrl + alt + cmd - 8 : yabai -m space --focus 8
ctrl + alt + cmd - 9 : yabai -m space --focus 9
ctrl + alt + cmd - 0 : yabai -m space --focus 0
#
# # SEND WINDOW TO DESKTOP AND FOCUS
ctrl + alt + cmd + shift - 0x32 : yabai -m window --space recent; yabai -m space --focus recent
ctrl + alt + cmd + shift - h : ~/.config/yabai/scripts/cycle_move_prev.sh
ctrl + alt + cmd + shift - l : ~/.config/yabai/scripts/cycle_move_next.sh

# # SEND WINDOW TO DESKTOP AND FAST FOCUS
ctrl + alt + cmd + shift - 1 : yabai -m window --space  1; yabai -m space --focus 1
ctrl + alt + cmd + shift - 2 : yabai -m window --space  2; yabai -m space --focus 2
ctrl + alt + cmd + shift - 3 : yabai -m window --space  3; yabai -m space --focus 3
ctrl + alt + cmd + shift - 4 : yabai -m window --space  4; yabai -m space --focus 4
ctrl + alt + cmd + shift - 5 : yabai -m window --space  5; yabai -m space --focus 5
ctrl + alt + cmd + shift - 6 : yabai -m window --space  6; yabai -m space --focus 6
ctrl + alt + cmd + shift - 7 : yabai -m window --space  7; yabai -m space --focus 7
ctrl + alt + cmd + shift - 8 : yabai -m window --space  8; yabai -m space --focus 8
ctrl + alt + cmd + shift - 9 : yabai -m window --space  9; yabai -m space --focus 9
ctrl + alt + cmd + shift - 0 : yabai -m window --space  0; yabai -m space --focus 0
